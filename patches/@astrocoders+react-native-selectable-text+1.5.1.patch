diff --git a/node_modules/@astrocoders/react-native-selectable-text/ios/RNSelectableTextView.m b/node_modules/@astrocoders/react-native-selectable-text/ios/RNSelectableTextView.m
index e1faa02..c2863ca 100644
--- a/node_modules/@astrocoders/react-native-selectable-text/ios/RNSelectableTextView.m
+++ b/node_modules/@astrocoders/react-native-selectable-text/ios/RNSelectableTextView.m
@@ -25,7 +25,7 @@
     RCTUITextView *_backedTextInputView;
 }
 
-NSString *const CUSTOM_SELECTOR = @"_CUSTOM_SELECTOR_";
+NSString *const CUSTOM_SELECTOR = @"CUSTOM_SELECTOR";
 
 UITextPosition *selectionStart;
 UITextPosition* beginning;
@@ -33,8 +33,7 @@ UITextPosition* beginning;
 - (instancetype)initWithBridge:(RCTBridge *)bridge
 {
     if (self = [super initWithBridge:bridge]) {
-        // `blurOnSubmit` defaults to `false` for <TextInput multiline={true}> by design.
-        self.blurOnSubmit = NO;
+        // blurOnSubmit defaults to false for <TextInput multiline={true}> by design.
         
         _backedTextInputView = [[RCTUITextView alloc] initWithFrame:self.bounds];
         _backedTextInputView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
@@ -132,41 +131,46 @@ UITextPosition* beginning;
     });
 }
 
--(void) handleLongPress: (UILongPressGestureRecognizer *) gesture
+- (void)handleLongPress:(UILongPressGestureRecognizer *)gesture
 {
-    
     CGPoint pos = [gesture locationInView:_backedTextInputView];
     pos.y += _backedTextInputView.contentOffset.y;
 
     UITextPosition *tapPos = [_backedTextInputView closestPositionToPoint:pos];
-    UITextRange *word = [_backedTextInputView.tokenizer rangeEnclosingPosition:tapPos withGranularity:(UITextGranularityWord) inDirection:UITextLayoutDirectionRight];
-
+    UITextRange *word = [_backedTextInputView.tokenizer rangeEnclosingPosition:tapPos withGranularity:UITextGranularityWord inDirection:UITextLayoutDirectionRight];
 
-    switch ([gesture state]) {
+    switch ([gesture state])
+    {
         case UIGestureRecognizerStateBegan:
             selectionStart = word.start;
             break;
         case UIGestureRecognizerStateChanged:
             break;
         case UIGestureRecognizerStateEnded:
-            selectionStart = nil;
-            [self _handleGesture];
+            if (selectionStart) {
+                UITextPosition *selectionEnd = word.end;
+                if ([_backedTextInputView comparePosition:selectionStart toPosition:selectionEnd] == NSOrderedDescending) {
+                    // Swap positions if the end is before the start
+                    UITextPosition *temp = selectionStart;
+                    selectionStart = selectionEnd;
+                    selectionEnd = temp;
+                }
+
+                const NSInteger location = [_backedTextInputView offsetFromPosition:beginning toPosition:selectionStart];
+                const NSInteger endLocation = [_backedTextInputView offsetFromPosition:beginning toPosition:selectionEnd];
+
+                if (location == 0 && endLocation == 0) return;
+
+                [_backedTextInputView select:self];
+                [_backedTextInputView setSelectedRange:NSMakeRange(location, endLocation - location)];
+                [self _handleGesture];
+                selectionStart = nil;
+            }
             return;
 
         default:
             break;
     }
-    
-    UITextPosition *selectionEnd = word.end;
-
-    const NSInteger location = [_backedTextInputView offsetFromPosition:beginning toPosition:selectionStart];
-    const NSInteger endLocation = [_backedTextInputView offsetFromPosition:beginning toPosition:selectionEnd];
-
-    if (location == 0 && endLocation == 0) return;
-
-    [_backedTextInputView select:self];
-    [_backedTextInputView setSelectedRange:NSMakeRange(location, endLocation - location)];
-
 }
 
 -(void) handleTap: (UITapGestureRecognizer *) gesture
